// Generated by view binder compiler. Do not edit!
package com.aniketjain.weatherapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.aniketjain.weatherapp.R;
import com.github.ybq.android.spinkit.SpinKitView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DayItemLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final RelativeLayout centerLayout;

  @NonNull
  public final TextView dayHumidity;

  @NonNull
  public final ImageView dayIcon;

  @NonNull
  public final TextView dayMaxTemp;

  @NonNull
  public final TextView dayMinTemp;

  @NonNull
  public final TextView dayPressure;

  @NonNull
  public final SpinKitView dayProgressBar;

  @NonNull
  public final RelativeLayout dayRelativeLayout;

  @NonNull
  public final TextView dayTime;

  @NonNull
  public final TextView dayWind;

  @NonNull
  public final RelativeLayout topLayout;

  private DayItemLayoutBinding(@NonNull RelativeLayout rootView,
      @NonNull RelativeLayout centerLayout, @NonNull TextView dayHumidity,
      @NonNull ImageView dayIcon, @NonNull TextView dayMaxTemp, @NonNull TextView dayMinTemp,
      @NonNull TextView dayPressure, @NonNull SpinKitView dayProgressBar,
      @NonNull RelativeLayout dayRelativeLayout, @NonNull TextView dayTime,
      @NonNull TextView dayWind, @NonNull RelativeLayout topLayout) {
    this.rootView = rootView;
    this.centerLayout = centerLayout;
    this.dayHumidity = dayHumidity;
    this.dayIcon = dayIcon;
    this.dayMaxTemp = dayMaxTemp;
    this.dayMinTemp = dayMinTemp;
    this.dayPressure = dayPressure;
    this.dayProgressBar = dayProgressBar;
    this.dayRelativeLayout = dayRelativeLayout;
    this.dayTime = dayTime;
    this.dayWind = dayWind;
    this.topLayout = topLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DayItemLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DayItemLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.day_item_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DayItemLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.center_layout;
      RelativeLayout centerLayout = ViewBindings.findChildViewById(rootView, id);
      if (centerLayout == null) {
        break missingId;
      }

      id = R.id.day_humidity;
      TextView dayHumidity = ViewBindings.findChildViewById(rootView, id);
      if (dayHumidity == null) {
        break missingId;
      }

      id = R.id.day_icon;
      ImageView dayIcon = ViewBindings.findChildViewById(rootView, id);
      if (dayIcon == null) {
        break missingId;
      }

      id = R.id.day_max_temp;
      TextView dayMaxTemp = ViewBindings.findChildViewById(rootView, id);
      if (dayMaxTemp == null) {
        break missingId;
      }

      id = R.id.day_min_temp;
      TextView dayMinTemp = ViewBindings.findChildViewById(rootView, id);
      if (dayMinTemp == null) {
        break missingId;
      }

      id = R.id.day_pressure;
      TextView dayPressure = ViewBindings.findChildViewById(rootView, id);
      if (dayPressure == null) {
        break missingId;
      }

      id = R.id.day_progress_bar;
      SpinKitView dayProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (dayProgressBar == null) {
        break missingId;
      }

      id = R.id.day_relative_layout;
      RelativeLayout dayRelativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (dayRelativeLayout == null) {
        break missingId;
      }

      id = R.id.day_time;
      TextView dayTime = ViewBindings.findChildViewById(rootView, id);
      if (dayTime == null) {
        break missingId;
      }

      id = R.id.day_wind;
      TextView dayWind = ViewBindings.findChildViewById(rootView, id);
      if (dayWind == null) {
        break missingId;
      }

      id = R.id.top_layout;
      RelativeLayout topLayout = ViewBindings.findChildViewById(rootView, id);
      if (topLayout == null) {
        break missingId;
      }

      return new DayItemLayoutBinding((RelativeLayout) rootView, centerLayout, dayHumidity, dayIcon,
          dayMaxTemp, dayMinTemp, dayPressure, dayProgressBar, dayRelativeLayout, dayTime, dayWind,
          topLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
